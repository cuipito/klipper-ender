# =======================
# macro.cfg (Updated)
# =======================


[gcode_macro clean_nozzle]
gcode:
M104 S225 #set nozzle temp to 225°C
{% if printer.toolhead.homed_axes != "xyz" %}
G28
{% endif %}
M109 S225 #wait if temp is 225°C
G1 Z50
G1 X245 F9000
G1 X230 F9000
G1 X245 F9000
G1 X230 F9000
G1 X245 F9000
G1 X230 F9000
G1 X245 F9000
G1 X230 F9000
G1 X245 F9000
G1 X230 F9000
G1 X150


[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

# ABL
[gcode_macro _KAMP_Settings]
description: This macro contains all adjustable settings for KAMP 

# The following variables are settings for KAMP as a whole.
variable_verbose_enable: True               # Set to True to enable KAMP information output when running. This is useful for debugging.

# The following variables are for adjusting adaptive mesh settings for KAMP.
variable_mesh_margin: 0                     # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
variable_fuzz_amount: 0                     # Slightly randomizes mesh points to spread out wear from nozzle-based probes. Leave at 0 to disable.

# The following variables are for those with a dockable probe like Klicky, Euclid, etc.                 # ----------------  Attach Macro | Detach Macro
variable_probe_dock_enable: False           # Set to True to enable the usage of a dockable probe.      # ---------------------------------------------
variable_attach_macro: 'Attach_Probe'       # The macro that is used to attach the probe.               # Klicky Probe:   'Attach_Probe' | 'Dock_Probe'
variable_detach_macro: 'Dock_Probe'         # The macro that is used to store the probe.                # Euclid Probe:   'Deploy_Probe' | 'Stow_Probe'
                                                                                                        # Legacy Gcode:   'M401'         | 'M402'

# The following variables are for adjusting adaptive purge settings for KAMP.
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 0                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.

# The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height.
variable_smart_park_height: 10              # Z position for Smart Park, default is 10.

gcode: # Gcode section left intentionally blank. Do not disturb.

    {action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}


    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        {% if purge_y_origin > 0 %}
        
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }
    
        {% else %}
    
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }

        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

        {% if purge_y_origin > 0 %}                                                             # If there's room on Y, purge along X axis in front of print area

            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_center} Y{purge_y_origin}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% else %}                                                                              # If there's room on X, purge along Y axis to the left of print area
            
            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_center}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state
    
    {% endif %}
    
[gcode_macro G29]
#variable_parameter_AREA_START : 0,0
#variable_parameter_AREA_END : 0,0
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
#    BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
    G0 X150 Y150 Z150 F6000

# level gantry
[gcode_macro G34]
gcode:
    Z_TILT_ADJUST

# Park toolhead
[gcode_macro M125]
gcode:
    SAVE_GCODE_STATE NAME=parking
    PLAY_SINGLE_FEEDBACK_SOUND
    G91
    G1 Z{params.ZLIFT|default(10)|int} F3000
    G90
    G1 X{params.XPOS|default(15)|int} Y{params.YPOS|default(15)|int} F3000
    RESTORE_GCODE_STATE NAME=parking

# load filament. Slow feed filament into the gear, fast load to cold zone then slow load to nozzle.
[gcode_macro loading_filament]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Loading Fil."
    M83
    G92 E0.0
    MIN_TEMP_CHECK
    G1 E{params.FEED_LENGTH|default(10)|int} F200    ; slow feed filament
    G1 E{params.FAST_LOAD_LENGTH|default(50)|int} F2000    ; Fast load to cold zone
    G1 E{params.SLOW_LOAD_LENGTH|default(50)|int} F100     ; Slow load to nozzle
    G92 E0.0
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Ready"
    RESTORE_GCODE_STATE NAME=loading_filament

# Unload filament. Extrude a small amount, quick pull then slow pull
[gcode_macro unloading_filament]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Unloading Fil."
    MIN_TEMP_CHECK
    G91 ; set relative
    G1 E{params.FEED_LENGTH|default(10)|int} F100
    G92 E0.0
    G1 E-{params.FAST_UNLOAD_LENGTH|default(70)|int} F2000  ; fast unload
    G92 E0.0
    G1 E-{params.SLOW_UNLOAD_LENGTH|default(40)|int} F1000  ; slow unload
    G92 E0.0
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Ready"
    RESTORE_GCODE_STATE NAME=unloading_filament

# filament change
[gcode_macro M600]
gcode:
    PAUSE
    PRINT MSG="Filament change!"

[gcode_macro M900]
gcode:
    SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)|float}

[gcode_macro MIN_TEMP_CHECK]
gcode:
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %}
            PLAY_LONG_FEEDBACK_SOUND
            M109 S{printer.extruder.target|float}
        {% endif %}
    {% else %}
        PLAY_LONG_FEEDBACK_SOUND
        M109 S{params.T|default(200)|float}
    {% endif %}
    PLAY_DOUBLE_FEEDBACK_SOUND

# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0}
# AREA_START=%MINX%,%MINY% AREA_END=%MAXX%,%MAXY% FILAMENT_TYPE={material_type}
[gcode_macro START_PRINT]
variable_parameter_EXTRUDER_TEMP: 190
variable_parameter_BED_TEMP: 60
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_parameter_FILAMENT_TYPE : "PLA"
gcode:
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    
    {% if printer.homed_axes != "XYZ" %}
        PRINT MSG="Homing..."
        G28
        PRINT MSG="Aligning Z..."
        G34 ; level gantry
    {% else %}
        PRINT MSG="Homing..."
        G28
    {% endif %}
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE
    LINE_PURGE
    G90
    G0 X90 Y90 Z50 F3000

    SET_FAN_SPEED FAN=filter_fan SPEED=0.5 ; filter fan slow mode
    SET_FAN_SPEED FAN=bed_fan SPEED=1.0    ; turn on bed fan

    PRINT MSG="Waiting for temperature"

    ; preheat temp
    M140 S{params.BED_TEMP|default(60)|float - 10}
    M104 S150

    ; wait
    M190 S{params.BED_TEMP|default(60)|float - 10}

    ; set real temp
    M140 S{params.BED_TEMP|default(60)|float}
    M104 S{params.EXTRUDER_TEMP|default(200)|float}

    ; wait
    M190 S{params.BED_TEMP|default(60)|float}
    M109 S{params.EXTRUDER_TEMP|default(200)|float}

    M300
    PRINT MSG="Homing Z..."
    G28 Z
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE

    #BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}


    SET_FILAMENT_PROFILE TYPE={params.FILAMENT_TYPE|default("PLA")}

    PRINT MSG="Prime Line"
    G92 E0 ;Reset Extruder
    G0 X-3 Y180 F3000
    G1 Z0.2 F1000
    LINE_PURGE
    #G1 Y95 E9 F1000   ;Draw first line
    #G1 Y85 F3000      ;Move to side
    #G1 Y0 E21 F1500.0 ;Draw second line
    G92 E0            ;Reset Extruder
    G1 Z2.0 F1000     ;Move Z Axis up

    M221 S93
    PRINT MSG="{printer.print_stats.filename}"

[gcode_macro END_PRINT]
gcode:
    PRINT MSG="Done printing!"
    M300
    G91
    G1 E-2 F300
    {% if printer.toolhead.position.z <= 60 %}
        G90
        G0 Z70 F3000
        G91
    {% else %}
        G0 Z5 F3000
    {% endif %}
    G90
    G0 X30 Y170 F3000
    TURN_OFF_HEATERS
    M107
    BED_MESH_CLEAR
    SET_FAN_SPEED FAN=filter_fan SPEED=1.0
    UPDATE_DELAYED_GCODE ID=TURN_OFF_FILTER_FAN_TIMER DURATION=600

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_OLD
gcode:
    PRINT MSG="Aborted!"
    M300
    G91
    G1 E-2 F300
    {% if printer.toolhead.position.z <= 60 %}
        G90
        G0 Z70 F3000
        G91
    {% else %}
        G0 Z5 F3000
    {% endif %}

    G90
    G0 X30 Y170 F3000
    CLEAR_PAUSE
    TURN_OFF_HEATERS
    M107
    BED_MESH_CLEAR
    CANCEL_PRINT_OLD
    SDCARD_RESET_FILE
    SET_FAN_SPEED FAN=filter_fan SPEED=1.0
    UPDATE_DELAYED_GCODE ID=TURN_OFF_FILTER_FAN_TIMER DURATION=600

[gcode_macro DISABLE_XY_MOTOR]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro M300]
gcode:
    SET_PIN PIN=BEEPER_pin VALUE={params.S|default(100)|int}
    G4 P{params.P|default(1000)|int}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro RESUME]
rename_existing: RESUME_OLD
gcode:
    G91
    G92 E0
    G1 E0.5 F300
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    PRINT MSG="{printer.print_stats.filename}"
    RESUME_OLD

[gcode_macro PAUSE]
rename_existing: PAUSE_OLD
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE_OLD
    G91
    G92 E0
    G1 E-2 F300
    M125
    PRINT MSG="Paused!"

[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S100 P1000
    M300 S1 P100

[gcode_macro UPDATE_BED_MESH]
gcode:
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Aligning Z..."
    G34
    PRINT MSG="Probing..."
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    #BED_MESH_CALIBRATE
    PRINT MSG="Saving..."
    SAVE_CONFIG

[delayed_gcode TURN_OFF_PSU]
initial_duration: 0.
gcode:
    {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
        {% if printer.extruder.temperature < 50 %}
            M84
            {action_call_remote_method("set_device_power", device="PSU", state="off")}
        {% else %}
            UPDATE_DELAYED_GCODE ID=TURN_OFF_PSU DURATION=300
        {% endif %}
    {% endif %}

# run on startup
[delayed_gcode INIT]
initial_duration: 1
gcode:
    PRINT MSG="Init..."
    UPDATE_DELAYED_GCODE ID=TURN_OFF_PSU DURATION=1200
    PRINT MSG="Ready"

[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        {action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        {action_respond_info((params.MSG) | string)}
    {% else %}
        M117 {params.MSG | string}
    {% endif %}

[delayed_gcode TURN_OFF_FILTER_FAN_TIMER]
gcode:
    {% if printer.idle_timeout.state == "Idle" %}
        SET_FAN_SPEED FAN=filter_fan SPEED=0.0
    {% endif %}

[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile")
              and (name1 != "bed_mesh" and name2!="mesh_matrix")
              and (name1 != "mcu" and name2!="mcu_constants")
              and (name1 != "mcu" and name2!="last_stats")
              and (name2 != "color_data")
              and (andm1 != "gcode_macro") %}
            {action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]))}
        {% else %}
            {action_respond_info("printer['%s'].%s = %s" % (name1, name2, "..."))}
        {% endif %}
      {% endfor %}
   {% endfor %}

[gcode_macro AUTO_SAVE_CONFIG]
gcode:
    {% if printer.configfile.save_config_pending %}
        PRINT MSG="Saving config"
        SAVE_CONFIG
    {% endif %}

[gcode_macro TOGGLE_LED]
gcode:
    {% if printer.save_variables.variables.led_status|int == 1 %}
        SET_LED LED=led RED=0.13 GREEN=0.23 BLUE=0.23
    {% else %}
        SET_LED LED=led RED=0.58 GREEN=1 BLUE=1
    {% endif %}
    {action_respond_info("Toggle led.")}

[gcode_macro CHECK_MESH]
gcode:
    {% set ns = namespace(
        min_point = printer.bed_mesh.probed_matrix[0][0],
        max_point = printer.bed_mesh.probed_matrix[0][0]
      ) %}
    {% for data_row in printer.bed_mesh.probed_matrix %}
        {% for probe_point in data_row %}
            {% if ns.min_point > probe_point %}
                {% set ns.min_point = probe_point %}
            {% endif %}
            {% if ns.max_point < probe_point %}
                {% set ns.max_point = probe_point %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info("Mesh delta : " + (ns.max_point - ns.min_point) | string)}
    {% if ns.max_point - ns.min_point > params.THRESHOLD|default(0.3)|float %}
        {action_respond_info("Mesh Error!")}
    {% else %}
        {action_respond_info("Mesh OK!")}
    {% endif %}

# --------------------
# ADJUSTED MACRO BELOW
# --------------------
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
#
## Changed defaults so it won't say "Invalid custom mesh parameters"
## if you run BED_MESH_CALIBRATE with no arguments.
#variable_parameter_AREA_START : 5,5
#variable_parameter_AREA_END : 194,186
#
## the clearance between print area and probe area
#variable_mesh_area_offset : 5.0
## number of sample per probe point
#variable_probe_samples : 2
# minimum and maximum probe count
#variable_min_probe_count : 3
## scale up the probe count, the value should be 1.0 ~ < max/min probe count
#variable_probe_count_scale_factor : 1.0
#
#gcode:
#    {% if params.AREA_START and params.AREA_END %}
#        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
#
#        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
#        {% set area_min_y = params.AREA_START.split(",")[1]|float %}
#        {% set area_max_x = params.AREA_END.split(",")[0]|float %}
#        {% set area_max_y = params.AREA_END.split(",")[1]|float %}
#
#        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
#
#        {% set meshMaxPointX = meshPointX %}
#        {% set meshMaxPointY = meshPointY %}
#
#        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
#            {% if area_min_x - mesh_area_offset >= safe_min_x %}
#                {% set area_min_x = area_min_x - mesh_area_offset %}
#            {% else %}
#                {% set area_min_x = safe_min_x %}
#            {% endif %}
#
#            {% if area_min_y - mesh_area_offset >= safe_min_y %}
#                {% set area_min_y = area_min_y - mesh_area_offset %}
#            {% else %}
#                {% set area_min_y = safe_min_y %}
#            {% endif %}
#
#            {% if area_max_x + mesh_area_offset <= safe_max_x %}
#                {% set area_max_x = area_max_x + mesh_area_offset %}
#            {% else %}
#                {% set area_max_x = safe_max_x %}
#            {% endif %}
#
#            {% if area_max_y + mesh_area_offset <= safe_max_y %}
#                {% set area_max_y = area_max_y + mesh_area_offset %}
#            {% else %}
#                {% set area_max_y = safe_max_y %}
#            {% endif %}
#
#            PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1
#
#            {% set meshPointX = (meshPointX * (area_max_x - area_min_x)
#                                 / (safe_max_x - safe_min_x)
#                                 * probe_count_scale_factor|float)|round(0)|int %}
#            {% if meshPointX < min_probe_count %}
#                {% set meshPointX = min_probe_count %}
#            {% endif %}
#            {% if meshPointX > meshMaxPointX %}
#                {% set meshPointX = meshMaxPointX %}
#            {% endif %}
#
#            {% set meshPointY = (meshPointY * (area_max_y - area_min_y)
#                                 / (safe_max_y - safe_min_y)
#                                 * probe_count_scale_factor|float)|round(0)|int %}
#            {% if meshPointY < min_probe_count %}
#                {% set meshPointY = min_probe_count %}
#            {% endif %}
#            {% if meshPointY > meshMaxPointY %}
#                {% set meshPointY = meshMaxPointY %}
#            {% endif %}
#
#            PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
#            PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2
#
 #           BED_MESH_CALIBRATE_BASE \
 #               mesh_min={area_min_x},{area_min_y} \
#                mesh_max={area_max_x},{area_max_y} \
#                probe_count={meshPointX},{meshPointY} \
#                samples={probe_samples|int}
#        {% else %}
#            PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
#            PRINT MSG="Mesh: default" OUTPUT_TARGET=2
#            BED_MESH_CALIBRATE_BASE
#        {% endif %}
#    {% else %}
#        PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
#        PRINT MSG="Mesh: default" OUTPUT_TARGET=2
#        BED_MESH_CALIBRATE_BASE
#    {% endif %}

[gcode_macro DISPLAY_GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : 0
gcode:
    PRINT MSG="GCODE_PROGRESS,{params.CURRENT_LAYER}/{params.TOTAL_LAYER},{params.PROGRESS},{params.REMAIN}" OUTPUT_TARGET=2

[gcode_macro SET_FILAMENT_PROFILE]
gcode:
  {% if params.TYPE|default("PLA") == "PLA" %}
    PRINT MSG="Set filament profile : PLA" OUTPUT_TARGET=1
    SET_PRESSURE_ADVANCE ADVANCE=0.05
  {% elif params.TYPE|default("PLA") == "PETG" %}
    PRINT MSG="Set filament profile : PETG" OUTPUT_TARGET=1
    SET_PRESSURE_ADVANCE ADVANCE=0.08
  {% elif params.TYPE|default("PLA") == "ABS" %}
    PRINT MSG="Set filament profile : ABS" OUTPUT_TARGET=1
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.TYPE|default("PLA") == "PC" %}
    PRINT MSG="Set filament profile : PC" OUTPUT_TARGET=1
    SET_PRESSURE_ADVANCE ADVANCE=0.07
  {% elif params.TYPE|default("PLA") == "CFPC" %}
    PRINT MSG="Set filament profile : CFPC" OUTPUT_TARGET=1
    SET_PRESSURE_ADVANCE ADVANCE=0.05
  {% else %}
    PRINT MSG="Set filament profile : Default" OUTPUT_TARGET=1
    SET_PRESSURE_ADVANCE ADVANCE=0.00
  {% endif %}

[gcode_macro DEBUG]
gcode:
    {% set tmp = "this is test" %}
    PRINT MSG="{tmp.split(',')|length}"
